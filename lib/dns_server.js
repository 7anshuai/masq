// Generated by CoffeeScript 2.0.0
(function() {
  // Pow's `DnsServer` is designed to respond to DNS `A` queries with
  // `127.0.0.1` for all subdomains of the specified top-level domain.
  // When used in conjunction with Mac OS X's [/etc/resolver
  // system](http://developer.apple.com/library/mac/#documentation/Darwin/Reference/ManPages/man5/resolver.5.html),
  // there's no configuration needed to add and remove host names for
  // local web development.
  var DnsServer, NS_C_IN, NS_RCODE_NXDOMAIN, NS_T_A, dnsserver;

  dnsserver = require("dnsserver");

  NS_T_A = 1;

  NS_C_IN = 1;

  NS_RCODE_NXDOMAIN = 3;

  module.exports = DnsServer = class DnsServer extends dnsserver.Server {
    // Create a `DnsServer` with the given `Configuration` instance. The
    // server installs a single event handler for responding to DNS
    // queries.
    constructor(configuration) {
      super();
      this.configuration = configuration;
      this.on("request", this.handleRequest);
    }

    // The `listen` method is just a wrapper around `bind` that makes
    // `DnsServer` quack like a `HttpServer` (for initialization, at
    // least).
    listen(port, callback) {
      this.bind(port);
      return typeof callback === "function" ? callback() : void 0;
    }

    // Each incoming DNS request ends up here. If it's an `A` query
    // and the domain name matches the top-level domain specified in our
    // configuration, we respond with `127.0.0.1`. Otherwise, we respond
    // with `NXDOMAIN`.
    handleRequest(req, res) {
      var pattern, q, ref;
      pattern = this.configuration.dnsDomainPattern;
      q = (ref = req.question) != null ? ref : {};
      if (q.type === NS_T_A && q.class === NS_C_IN && pattern.test(q.name)) {
        res.addRR(q.name, NS_T_A, NS_C_IN, 600, "127.0.0.1");
      } else {
        res.header.rcode = NS_RCODE_NXDOMAIN;
      }
      return res.send();
    }

  };

}).call(this);
