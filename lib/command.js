// Generated by CoffeeScript 2.0.0
(function() {
  // The `command` module is loaded when the `masq` binary runs. It parses
  // any command-line arguments and determines whether to install Pow's
  // configuration files or start the daemon itself.
  var Configuration, Daemon, Installer, usage;

  ({Daemon, Configuration, Installer} = require(".."));

  // Set the process's title to `masq` so it's easier to find in `ps`,
  // `top`, Activity Monitor, and so on.
  process.title = "masq";

  // Print valid command-line arguments and exit with a non-zero exit
  // code if invalid arguments are passed to the `masq` binary.
  usage = function() {
    console.error("usage: masq [--print-config | --install-local | --install-system [--dry-run]]");
    return process.exit(-1);
  };

  // Start by loading the user configuration from `~/.masqconfig`, if it
  // exists. The user configuration affects both the installer and the
  // daemon.
  Configuration.getUserConfiguration(function(err, configuration) {
    var arg, createInstaller, daemon, dryRun, i, installer, key, len, printConfig, ref, ref1, results, shellEscape, underscore, value;
    if (err) {
      throw err;
    }
    printConfig = false;
    dryRun = false;
    createInstaller = null;
    ref = process.argv.slice(2);
    for (i = 0, len = ref.length; i < len; i++) {
      arg = ref[i];
      // Set a flag if `--print-config` is requested.
      if (arg === "--print-config") {
        printConfig = true;
      // Cache the factory method for creating a local or system
      // installer if necessary.
      } else if (arg === "--install-local") {
        createInstaller = Installer.getLocalInstaller;
      } else if (arg === "--install-system") {
        createInstaller = Installer.getSystemInstaller;
      // Set a flag if a dry run is requested.
      } else if (arg === "--dry-run") {
        dryRun = true;
      } else {
        usage();
      }
    }
    // Abort if a dry run is requested without installing anything.
    if (dryRun && !createInstaller) {
      return usage();
    // Print out the current configuration in a format that can be
    // evaluated by a shell script (`eval $(pow --print-config)`).
    } else if (printConfig) {
      underscore = function(string) {
        return string.replace(/(.)([A-Z])/g, function(match, left, right) {
          return left + "_" + right.toLowerCase();
        });
      };
      shellEscape = function(string) {
        return "'" + string.toString().replace(/'/g, "'\\''") + "'";
      };
      ref1 = configuration.toJSON();
      results = [];
      for (key in ref1) {
        value = ref1[key];
        results.push(console.log("MASQ_" + underscore(key).toUpperCase() + "=" + shellEscape(value)));
      }
      return results;
    // Create the installer, passing in our loaded configuration.
    } else if (createInstaller) {
      installer = createInstaller(configuration);
      // If a dry run was requested, check to see whether any files need
      // to be installed with root privileges. If yes, exit with a status
      // of 1. If no, exit with a status of 0.
      if (dryRun) {
        return installer.needsRootPrivileges(function(needsRoot) {
          var exitCode;
          exitCode = needsRoot ? 1 : 0;
          return installer.getStaleFiles(function(files) {
            var file, j, len1;
            for (j = 0, len1 = files.length; j < len1; j++) {
              file = files[j];
              console.log(file.path);
            }
            return process.exit(exitCode);
          });
        });
      } else {
        // Otherwise, install all the requested files, printing the full
        // path of each installed file to stdout.
        return installer.install(function(err) {
          if (err) {
            throw err;
          }
        });
      }
    } else {
      // Start up the Pow daemon if no arguments were passed. Terminate the
      // process if the daemon requests a restart.
      daemon = new Daemon(configuration);
      daemon.on("restart", function() {
        return process.exit();
      });
      return daemon.start();
    }
  });

}).call(this);
