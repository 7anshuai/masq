// Generated by CoffeeScript 2.0.0
(function() {
  // The `Installer` class, in conjunction with the private
  // `InstallerFile` class, creates and installs local and system
  // configuration files if they're missing or out of date. It's used by
  // the Pow install script to set up the system for local development.
  var Installer, InstallerFile, async, chown, daemonSource, fs, mkdirp, path, resolverSource, util;

  async = require("async");

  fs = require("fs");

  path = require("path");

  mkdirp = require("mkdirp");

  ({chown} = require("./utils"));

  util = require("util");

  // Import the Eco templates for the `/etc/resolver` and `launchd`
  // configuration files.
  resolverSource = require("./templates/resolver");

  daemonSource = require("./templates/cx.masq.masqd.plist");

  // `InstallerFile` represents a single file candidate for installation:
  // a pathname, a string of the file's source, and optional flags
  // indicating whether the file needs to be installed as root and what
  // permission bits it should have.
  InstallerFile = class InstallerFile {
    constructor(path1, source, root = false, mode = 0o644) {
      this.path = path1;
      this.root = root;
      this.mode = mode;
      this.source = source.trim();
    }

    // Check to see whether the file actually needs to be installed. If
    // the file exists on the filesystem with the specified path and
    // contents, `callback` is invoked with false. Otherwise, `callback`
    // is invoked with true.
    isStale(callback) {
      return fs.exists(this.path, (exists) => {
        if (exists) {
          return fs.readFile(this.path, "utf8", (err, contents) => {
            if (err) {
              return callback(true);
            } else {
              return callback(this.source !== contents.trim());
            }
          });
        } else {
          return callback(true);
        }
      });
    }

    // Create all the parent directories of the file's path, if
    // necessary, and then invoke `callback`.
    vivifyPath(callback) {
      return mkdirp(path.dirname(this.path), 0o755, callback);
    }

    // Write the file's source to disk and invoke `callback`.
    writeFile(callback) {
      return fs.writeFile(this.path, this.source, "utf8", callback);
    }

    // If the root flag is set for this file, change its ownership to the
    // `root` user and `wheel` group. Then invoke `callback`.
    setOwnership(callback) {
      if (this.root) {
        return chown(this.path, "root:wheel", callback);
      } else {
        return callback(false);
      }
    }

    // Set permissions on the installed file with `chmod`.
    setPermissions(callback) {
      return fs.chmod(this.path, this.mode, callback);
    }

    // Install a file asynchronously, first by making its parent
    // directory, then writing it to disk, and finally setting its
    // ownership and permission bits.
    install(callback) {
      return async.series([this.vivifyPath.bind(this), this.writeFile.bind(this), this.setOwnership.bind(this), this.setPermissions.bind(this)], callback);
    }

  };

  // The `Installer` class operates on a set of `InstallerFile` instances.
  // It can check to see if any files are stale and whether or not root
  // access is necessary for installation. It can also install any stale
  // files asynchronously.
  module.exports = Installer = class Installer {
    // Factory method that takes a `Configuration` instance and returns
    // an `Installer` for DNS configuration files.
    static getSystemInstaller(configuration) {
      var domain, files, i, len, ref;
      files = [];
      ref = configuration.domains;
      for (i = 0, len = ref.length; i < len; i++) {
        domain = ref[i];
        files.push(new InstallerFile(`/etc/resolver/${domain}`, resolverSource(configuration), true));
      }
      return new Installer(files);
    }

    // Factory method that takes a `Configuration` instance and returns
    // an `Installer` for the Pow `launchctl` daemon configuration file.
    static getLocalInstaller(configuration) {
      return new Installer([new InstallerFile(`${process.env.HOME}/Library/LaunchAgents/cx.masq.masqd.plist`, daemonSource(configuration))]);
    }

    // Create an installer for a set of files.
    constructor(files1 = []) {
      this.files = files1;
    }

    // Invoke `callback` with an array of any files that need to be
    // installed.
    getStaleFiles(callback) {
      return async.select(this.files, function(file, proceed) {
        return file.isStale(proceed);
      }, callback(this.files));
    }

    // Invoke `callback` with a boolean argument indicating whether or
    // not any files need to be installed as root.
    needsRootPrivileges(callback) {
      return this.getStaleFiles(function(files) {
        return async.detect(files, function(file, proceed) {
          return proceed(file.root);
        }, function(result) {
          return callback(result != null);
        });
      });
    }

    // Installs any stale files asynchronously and then invokes
    // `callback`.
    install(callback) {
      return this.getStaleFiles(function(files) {
        return async.forEach(files, function(file, proceed) {
          return file.install(function(err) {
            if (!err) {
              console.log(file.path);
            }
            return proceed(err);
          });
        }, callback);
      });
    }

  };

}).call(this);
