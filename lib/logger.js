// Generated by CoffeeScript 2.0.0-beta2
(function() {
  var Log, Logger, dirname, fn, fs, i, len, level, mkdirp, ref;

  fs = require("fs");

  ({dirname} = require("path"));

  Log = require("log");

  ({mkdirp} = require("./utils"));

  module.exports = Logger = (function() {
    class Logger {
      constructor(path, level1 = "debug") {
        this.path = path;
        this.level = level1;
        this.readyCallbacks = [];
      }

      ready(callback) {
        if (this.state === "ready") {
          return callback.call(this);
        } else {
          this.readyCallbacks.push(callback);
          if (!this.state) {
            this.state = "initializing";
            return mkdirp(dirname(this.path), (err) => {
              if (err) {
                return this.state = null;
              } else {
                this.stream = fs.createWriteStream(this.path, {
                  flags: "a"
                });
                return this.stream.on("open", () => {
                  var i, len, ref;
                  this.log = new Log(this.level, this.stream);
                  this.state = "ready";
                  ref = this.readyCallbacks;
                  for (i = 0, len = ref.length; i < len; i++) {
                    callback = ref[i];
                    callback.call(this);
                  }
                  return this.readyCallbacks = [];
                });
              }
            });
          }
        }
      }

    };

    Logger.LEVELS = ["debug", "info", "notice", "warning", "error", "critical", "alert", "emergency"];

    return Logger;

  })();

  ref = Logger.LEVELS;
  fn = function(level) {
    return Logger.prototype[level] = function(...args) {
      return this.ready(function() {
        return this.log[level].apply(this.log, args);
      });
    };
  };
  for (i = 0, len = ref.length; i < len; i++) {
    level = ref[i];
    fn(level);
  }

}).call(this);
