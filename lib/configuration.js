// Generated by CoffeeScript 2.0.0
(function() {
  // The `Configuration` class encapsulates various options for a Masq
  // daemon (port numbers, directories, etc.).
  var Configuration, async, compilePattern, fs, getUserEnv, path, sourceScriptEnv;

  fs = require("fs");

  path = require("path");

  async = require("async");

  ({sourceScriptEnv} = require("./utils"));

  ({getUserEnv} = require("./utils"));

  module.exports = Configuration = (function() {
    class Configuration {
      // Evaluates the user configuration script and calls the `callback`
      // with the environment variables if the config file exists. Any
      // script errors are passed along in the first argument. (No error
      // occurs if the file does not exist.)
      static loadUserConfigurationEnvironment(callback) {
        return getUserEnv((err, env) => {
          var p;
          if (err) {
            return callback(err);
          } else {
            return fs.exists(p = this.userConfigurationPath, function(exists) {
              if (exists) {
                return sourceScriptEnv(p, env, callback);
              } else {
                return callback(null, env);
              }
            });
          }
        });
      }

      // Creates a Configuration object after evaluating the user
      // configuration file. Any environment variables in `~/.masqconfig`
      // affect the process environment and will be copied to spawned
      // subprocesses.
      static getUserConfiguration(callback) {
        return this.loadUserConfigurationEnvironment(function(err, env) {
          if (err) {
            return callback(err);
          } else {
            return callback(null, new Configuration(env));
          }
        });
      }

      // Pass in any environment variables you'd like to override when
      // creating a `Configuration` instance.
      constructor(env = process.env) {
        this.initialize(env);
      }

      // Valid environment variables and their defaults:
      initialize(env) {
        var base, ref, ref1, ref2, ref3, ref4;
        // `MASQ_BIN`: the path to the `masq` binary. (This should be
        // correctly configured for you.)
        this.bin = (ref = env.MASQ_BIN) != null ? ref : path.join(__dirname, "../bin/masq");
        // `MASQ_DNS_PORT`: the UDP port Masq listens on for incoming DNS
        // queries. Defaults to `20560`.
        this.dnsPort = (ref1 = env.MASQ_DNS_PORT) != null ? ref1 : 20560;
        // `MASQ_DOMAINS`: the top-level domains for which Masq will respond
        // to DNS `A` queries with `127.0.0.1`. Defaults to `dev`. If you
        // configure this in your `~/.masqconfig` you will need to re-run
        // `sudo masq --install-system` to make `/etc/resolver` aware of
        // the new TLDs.
        this.domains = (ref2 = (ref3 = env.MASQ_DOMAINS) != null ? ref3 : env.MASQ_DOMAINS) != null ? ref2 : "dev";
        // Allow for comma-separated domain lists, e.g. `MASQ_DOMAINS=dev,test`
        this.domains = (ref4 = typeof (base = this.domains).split === "function" ? base.split(",") : void 0) != null ? ref4 : this.domains;
        // Support *.xip.io top-level domains.
        this.allDomains = this.domains.concat(/\d+\.\d+\.\d+\.\d+\.xip\.io$/, /[0-9a-z]{1,7}\.xip\.io$/);
        // Precompile regular expressions for matching domain names to be
        // served by the DNS server.
        return this.dnsDomainPattern = compilePattern(this.domains);
      }

      // Gets an object of the `Configuration` instance's options that can
      // be passed to `JSON.stringify`.
      toJSON() {
        var i, key, len, ref, result;
        result = {};
        ref = this.constructor.optionNames;
        for (i = 0, len = ref.length; i < len; i++) {
          key = ref[i];
          result[key] = this[key];
        }
        return result;
      }

    };

    // The user configuration file, `~/.masqconfig`, is evaluated on
    // boot.  You can configure options such as the top-level domain,
    // number of workers, the worker idle timeout, and listening ports.

    //           export MASQ_DOMAINS=dev,test
    //           export MASQ_DNS_PORT=20561

    // See the `Configuration` constructor for a complete list of
    // environment options.
    Configuration.userConfigurationPath = path.join(process.env.HOME, ".masqconfig");

    // A list of option names accessible on `Configuration` instances.
    Configuration.optionNames = ["bin", "dnsPort", "domains"];

    return Configuration;

  })();

  // Helper function for compiling a list of top-level domains into a
  // regular expression for matching purposes.
  compilePattern = function(domains) {
    return RegExp(`((^|\\.)(${domains.join("|")}))\\.?$`, "i");
  };

}).call(this);
